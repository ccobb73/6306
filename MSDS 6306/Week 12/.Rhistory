corrplot(as.matrix(Attcor), method="color",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.1 Complete Coefficients and Correlations", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
# Top 9 positively correlated parameters with Attrition
par(cex=.6)
SA10<-c(head(SortAtt$Parameter,10))
corrplot(as.matrix(Attcor[SA10,SA10]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.2 Top 9 Postively Correlated Parameters", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
# Plot each of Top 9 positively correlated parameters with Attrition
par(mfrow=c(3,3), las=2)
plot(Attrition~OverTime, data=df, main="Overtime", xlab="", ylab="Attrition")
plot(Attrition~MaritalStatus, data=df, main="Marital Status", xlab="", ylab="")
plot(Attrition~DistanceFromHome, data=df, main="Distance From Home", xlab="", ylab="")
plot(Attrition~Gender, data=df, main= "Gender", xlab="", ylab="Attrition")
plot(Attrition~MonthlyRate, data=df, main="Monlthly Rate", xlab="", ylab="")
plot(Attrition~NumCompaniesWorked, data=df, main= "Num of Companies Worked", xlab="", ylab="")
plot(Attrition~JobRole, data=df, main="Job Role", xlab="", ylab="Attrition")
plot(Attrition~Department, data=df, main="Department", xlab="", ylab="")
plot(Attrition~EducationField, data=df, main="Eduaction Field", xlab="", ylab="")
##Calculate absolute value coefficients
Attrition$AbsAtt <- (Attrition$Correlation^2)^(1/2)
SortAbstAtt<- Attrition[order(-Attrition$AbsAtt),]
#Display Top 9 Absolute Correlated Parameters
row.names(SortAbstAtt)<-NULL
knitr::kable(head(SortAbstAtt,10))
#Display graphic with Highest Absolute Correlated Parameters
par(cex=.8)
SAA10<-c(head(SortAbstAtt$Parameter,10))
corrplot(as.matrix(Attcor[SAA10,SAA10]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.3 Top 9 Highly Correlated Parameters in absolute values", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
#Further look at top 9 absolute correlated parameters with Attrition
par(mfrow=c(3,3), las=2)
plot(Attrition~OverTime, data=df, main="Overtime", xlab="", ylab="Attrition")
plot(Attrition~TotalWorkingYears, data=df, main="Total Working Years", xlab="", ylab="")
plot(Attrition~JobLevel, data=df, main="Job Level", xlab="", ylab="")
plot(Attrition~MaritalStatus, data=df, main="Marital Status", xlab="", ylab="Attrition")
plot(Attrition~YearsInCurrentRole, data=df, main="Years in Current Role", xlab="", ylab="")
plot(Attrition~MonthlyIncome, data=df, main="Monthly Income", xlab="", ylab="")
plot(Attrition~Age, data=df, main="Age", xlab="", ylab="Attrition")
plot(Attrition~YearsWithCurrManager, data=df, main="Years with Current Manager", xlab="", ylab="")
plot(Attrition~StockOptionLevel, data=df, main="Stock Option Level", xlab="", ylab="")
# Display Job Role and Attrition correlation bar graph
par(mar=c(12, 5, 5, 2.1),mgp=c(10, 1, 0),las=2)
plot(Attrition~JobRole, data=df, main="Attrition vs. Job Role")
# Generate object for Job Role correlation coefficients
JobRole<- data.frame(Attcor$JobRole)
# Name JobRole rows
JobRole$Parameter<-row.names(Attcor)
# Rename titles Attrition
names(JobRole)<-c("Correlation", "Parameter")
# Calculate absolute value coefficients
JobRole$Abs <- (JobRole$Correlation^2)^(1/2)
SortJobRole<- JobRole[order(-JobRole$Abs),]
# Display top 5 Absolute Correlated Parameters
row.names(SortJobRole)<-NULL
knitr::kable(head(SortJobRole))
# Display graphic with top 4 Absolute Value of Correlated Parameters
par(cex=.8)
SJR5<-c(head(SortJobRole$Parameter,5))
corrplot(as.matrix(Attcor[SJR5,SJR5]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
title="Figure 1.4 Top 4 Absolute Value of Correlated Parameters", mar=c(0,0,2,0), tl.offset = 1,
sig.level = 0.05, insig = "blank",
diag=FALSE)
# Further look at top 4 absolute correlated parameters with Job ROle
par(las=2)
par(mar=c(12, 12, 5, 2.1),mgp=c(10, 1, 0),las=2)
plot(TotalWorkingYears~JobRole, data=df, main="Total Working Years vs Job Role")
plot(Age~JobRole, data=df, main="Age vs Job Role")
plot(MonthlyIncome~JobRole, data=df, main= "Montly Income vs Job Role")
# Converting numeric variables (of level parametets) to factors as needed
LM <- df
LM$Education <- as.factor(LM$Education)
LM$EnvironmentSatisfaction <- as.factor(LM$EnvironmentSatisfaction)
LM$JobInvolvement <- as.factor(LM$JobInvolvement)
LM$JobSatisfaction <- as.factor(LM$JobSatisfaction)
LM$PerformanceRating <- as.factor(LM$PerformanceRating)
LM$RelationshipSatisfaction <- as.factor(LM$RelationshipSatisfaction)
LM$WorkLifeBalance <- as.factor(LM$WorkLifeBalance)
## Creating a Training and Testing data set from sampling as a random 80% of the data set provided
smp<-floor(0.9*nrow(LM))
set.seed(123)
ind <- sample(seq_len(nrow(LM)),size=smp)
train <- LM[ind,]
test <- LM[-ind,]
## Load requiered libraries
library(psych)
library(pander)
#Logistic Regression
model <- glm(Attrition ~ ., family = 'binomial', data = train)
pander(model)
cat(paste("AIC for preliminary model is: ", model$aic))
## Model 2
model2 <- glm(Attrition ~ Age + BusinessTravel + DistanceFromHome + EnvironmentSatisfaction +   JobInvolvement + JobRole + JobSatisfaction + MaritalStatus + NumCompaniesWorked + OverTime +   RelationshipSatisfaction + TrainingTimesLastYear + WorkLifeBalance + YearsAtCompany + YearsInCurrentRole + YearsSinceLastPromotion + YearsWithCurrManager, family = 'binomial', data = train)
pander(model2)
#run anova on model2
pander(anova(model2, test = 'Chisq'))
cat(paste("AIC for refined model is: ", model2$aic))
# Model 3 - Logistic Regression Model with the top 3 statistially significant parameters
model3 <- glm(Attrition ~ JobSatisfaction + MaritalStatus + OverTime , family = 'binomial', data = train)
cat(paste("AIC for 3 variables model is: ", model3$aic))
#Prediction for the test data
predmodel <- round(predict(model2,test,type='response'),digits=0)
comparison <- data.frame(predmodel,test$Attrition,test$EmployeeNumber)
names(comparison)<- c("Predicted","Actual","EmployeeNumber")
pred <- ifelse(predmodel>0.5,2,1)
#Loading required libraries
suppressWarnings(suppressMessages(library(ROCR)))
suppressWarnings(suppressMessages(library(Metrics)))
suppressWarnings(suppressMessages(library(pROC)))
pr <- prediction(pred,test$Attrition)
perf <- performance(pr,measure = "tpr",x.measure = "fpr")
plot(perf)
auc(test$Attrition,pred)
#Prediction probabilities and results in comparison with actuals
comparison2 <- cbind(predmodel,pred,test$Attrition,test$EmployeeNumber)
colnames(comparison2) <- c("Probability Greater Than .5 is Yes and Lower than .5 is No ", "Prediction - 2 Yes and 1 is No","Actual - 2 Yes and 1 is No","Employee Number")
#Missclassification error
tabb <- table(Predicted = pred, Actual = test$Attrition)
row.names(tabb) <- c("total number","total missclassifications")
knitr::kable(head(tabb))
#Missclassification percentage
cat(1-sum(diag(tabb))/sum(tabb))
#Goodness of fit test
cat(with(model2,pchisq(null.deviance-deviance,df.null-df.residual,lower.tail = F)))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load requeried library
suppressWarnings(suppressMessages(library("readxl")))
suppressWarnings(suppressMessages(library(RCurl)))
# After unziping the provided datafile, the .xlsl document was loaded on GitHub, the code below process information from GitHub instead of our local computers.
download.file("https://raw.githubusercontent.com/cyberkoolman/msds.6306.case.study.2/master/Data/CaseStudy2-data.xlsx", "Data/data2.xlsx", mode="wb")
## Assign file to object
case_data <- data.frame(read_excel("Data/data2.xlsx"))
# Remove redundandt info: EmployeeCount, Over18, StandardHours
df <- case_data[,-c(9,22,27)]
# Load required libraries.
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(knitr)))
suppressWarnings(suppressMessages(library(pander)))
# Convert characters to factors.
df %>% map_if(is.character, as.factor) %>% as_data_frame -> df
#Adjust factor levels as needed
levels(df$BusinessTravel)<-c("Non-Travel","Travel_Rarely","Travel_Frequently")
#Make all variable numeric
numdf<-data.frame(sapply(df,as.numeric))
#Calculate attrition in data set
AT <- table(df$Attrition)
pander(AT)
#And percentages
at<-data.frame(table(df$Attrition))
pander(prop.table(at[,2]))
#Correlate variables
Attcor<-data.frame(cor(numdf))
#Create Attrition object for Attrition correlation coefficients
Attrition<- data.frame(Attcor$Attrition)
#Name attrition rows
Attrition$Parameter<-row.names(Attcor)
#Rename titles Attrition
names(Attrition)<-c("Correlation", "Parameter")
#Sort positive Attrition
SortAtt <- Attrition[order(-Attrition$Correlation),]
#Display top 10 Positively Correlated Parameters
row.names(SortAtt)<-NULL
knitr::kable(head(SortAtt, 10))
# Load library to visualize correlations
suppressWarnings(suppressMessages(library(corrplot)))
#Display graphic with all correlations
par(cex=.5)
corrplot(as.matrix(Attcor), method="color",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.1 Complete Coefficients and Correlations", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
# Top 9 positively correlated parameters with Attrition
par(cex=.6)
SA10<-c(head(SortAtt$Parameter,10))
corrplot(as.matrix(Attcor[SA10,SA10]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.2 Top 9 Postively Correlated Parameters", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
# Plot each of Top 9 positively correlated parameters with Attrition
par(mfrow=c(3,3), las=2)
plot(Attrition~OverTime, data=df, main="Overtime", xlab="", ylab="Attrition")
plot(Attrition~MaritalStatus, data=df, main="Marital Status", xlab="", ylab="")
plot(Attrition~DistanceFromHome, data=df, main="Distance From Home", xlab="", ylab="")
plot(Attrition~Gender, data=df, main= "Gender", xlab="", ylab="Attrition")
plot(Attrition~MonthlyRate, data=df, main="Monlthly Rate", xlab="", ylab="")
plot(Attrition~NumCompaniesWorked, data=df, main= "Num of Companies Worked", xlab="", ylab="")
plot(Attrition~JobRole, data=df, main="Job Role", xlab="", ylab="Attrition")
plot(Attrition~Department, data=df, main="Department", xlab="", ylab="")
plot(Attrition~EducationField, data=df, main="Eduaction Field", xlab="", ylab="")
##Calculate absolute value coefficients
Attrition$AbsAtt <- (Attrition$Correlation^2)^(1/2)
SortAbstAtt<- Attrition[order(-Attrition$AbsAtt),]
#Display Top 9 Absolute Correlated Parameters
row.names(SortAbstAtt)<-NULL
knitr::kable(head(SortAbstAtt,10))
#Display graphic with Highest Absolute Correlated Parameters
par(cex=.8)
SAA10<-c(head(SortAbstAtt$Parameter,10))
corrplot(as.matrix(Attcor[SAA10,SAA10]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.3 Top 9 Highly Correlated Parameters in absolute values", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
#Further look at top 9 absolute correlated parameters with Attrition
par(mfrow=c(3,3), las=2)
plot(Attrition~OverTime, data=df, main="Overtime", xlab="", ylab="Attrition")
plot(Attrition~TotalWorkingYears, data=df, main="Total Working Years", xlab="", ylab="")
plot(Attrition~JobLevel, data=df, main="Job Level", xlab="", ylab="")
plot(Attrition~MaritalStatus, data=df, main="Marital Status", xlab="", ylab="Attrition")
plot(Attrition~YearsInCurrentRole, data=df, main="Years in Current Role", xlab="", ylab="")
plot(Attrition~MonthlyIncome, data=df, main="Monthly Income", xlab="", ylab="")
plot(Attrition~Age, data=df, main="Age", xlab="", ylab="Attrition")
plot(Attrition~YearsWithCurrManager, data=df, main="Years with Current Manager", xlab="", ylab="")
plot(Attrition~StockOptionLevel, data=df, main="Stock Option Level", xlab="", ylab="")
# Display Job Role and Attrition correlation bar graph
par(mar=c(12, 5, 5, 2.1),mgp=c(10, 1, 0),las=2)
plot(Attrition~JobRole, data=df, main="Attrition vs. Job Role")
# Generate object for Job Role correlation coefficients
JobRole<- data.frame(Attcor$JobRole)
# Name JobRole rows
JobRole$Parameter<-row.names(Attcor)
# Rename titles Attrition
names(JobRole)<-c("Correlation", "Parameter")
# Calculate absolute value coefficients
JobRole$Abs <- (JobRole$Correlation^2)^(1/2)
SortJobRole<- JobRole[order(-JobRole$Abs),]
# Display top 5 Absolute Correlated Parameters
row.names(SortJobRole)<-NULL
knitr::kable(head(SortJobRole))
# Display graphic with top 4 Absolute Value of Correlated Parameters
par(cex=.8)
SJR5<-c(head(SortJobRole$Parameter,5))
corrplot(as.matrix(Attcor[SJR5,SJR5]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
title="Figure 1.4 Top 4 Absolute Value of Correlated Parameters", mar=c(0,0,2,0), tl.offset = 1,
sig.level = 0.05, insig = "blank",
diag=FALSE)
# Further look at top 4 absolute correlated parameters with Job ROle
par(las=2)
par(mar=c(12, 12, 5, 2.1),mgp=c(10, 1, 0),las=2)
plot(TotalWorkingYears~JobRole, data=df, main="Total Working Years vs Job Role")
plot(Age~JobRole, data=df, main="Age vs Job Role")
plot(MonthlyIncome~JobRole, data=df, main= "Montly Income vs Job Role")
# Converting numeric variables (of level parametets) to factors as needed
LM <- df
LM$Education <- as.factor(LM$Education)
LM$EnvironmentSatisfaction <- as.factor(LM$EnvironmentSatisfaction)
LM$JobInvolvement <- as.factor(LM$JobInvolvement)
LM$JobSatisfaction <- as.factor(LM$JobSatisfaction)
LM$PerformanceRating <- as.factor(LM$PerformanceRating)
LM$RelationshipSatisfaction <- as.factor(LM$RelationshipSatisfaction)
LM$WorkLifeBalance <- as.factor(LM$WorkLifeBalance)
## Creating a Training and Testing data set from sampling as a random 80% of the data set provided
smp<-floor(0.9*nrow(LM))
set.seed(123)
ind <- sample(seq_len(nrow(LM)),size=smp)
train <- LM[ind,]
test <- LM[-ind,]
## Load requiered libraries
library(psych)
library(pander)
#Logistic Regression
model <- glm(Attrition ~ ., family = 'binomial', data = train)
pander(model)
cat(paste("AIC for preliminary model is: ", model$aic))
## Model 2
model2 <- glm(Attrition ~ Age + BusinessTravel + DistanceFromHome + EnvironmentSatisfaction +   JobInvolvement + JobRole + JobSatisfaction + MaritalStatus + NumCompaniesWorked + OverTime +   RelationshipSatisfaction + TrainingTimesLastYear + WorkLifeBalance + YearsAtCompany + YearsInCurrentRole + YearsSinceLastPromotion + YearsWithCurrManager, family = 'binomial', data = train)
pander(model2)
#run anova on model2
pander(anova(model2, test = 'Chisq'))
cat(paste("AIC for refined model is: ", model2$aic))
# Model 3 - Logistic Regression Model with the top 3 statistially significant parameters
model3 <- glm(Attrition ~ JobSatisfaction + MaritalStatus + OverTime , family = 'binomial', data = train)
cat(paste("AIC for 3 variables model is: ", model3$aic))
#Prediction for the test data
predmodel <- round(predict(model2,test,type='response'),digits=0)
comparison <- data.frame(predmodel,test$Attrition,test$EmployeeNumber)
names(comparison)<- c("Predicted","Actual","EmployeeNumber")
pred <- ifelse(predmodel>0.5,2,1)
#Loading required libraries
suppressWarnings(suppressMessages(library(ROCR)))
suppressWarnings(suppressMessages(library(Metrics)))
suppressWarnings(suppressMessages(library(pROC)))
pr <- prediction(pred,test$Attrition)
perf <- performance(pr,measure = "tpr",x.measure = "fpr")
plot(perf)
auc(test$Attrition,pred)
#Prediction probabilities and results in comparison with actuals
comparison2 <- cbind(predmodel,pred,test$Attrition,test$EmployeeNumber)
colnames(comparison2) <- c("Probability Greater Than .5 is Yes and Lower than .5 is No ", "Prediction - 2 Yes and 1 is No","Actual - 2 Yes and 1 is No","Employee Number")
#Missclassification error
tabb <- table(Predicted = pred, Actual = test$Attrition)
row.names(tabb) <- c("total number","total missclassifications")
knitr::kable(head(tabb))
#Missclassification percentage
cat(1-sum(diag(tabb))/sum(tabb))
#Goodness of fit test
cat(with(model2,pchisq(null.deviance-deviance,df.null-df.residual,lower.tail = F)))
knitr::opts_chunk$set(echo = TRUE)
# Load requeried library
suppressWarnings(suppressMessages(library("readxl")))
suppressWarnings(suppressMessages(library(RCurl)))
# After unziping the provided datafile, the .xlsl document was loaded on GitHub, the code below process information from GitHub instead of our local computers.
download.file("https://raw.githubusercontent.com/cyberkoolman/msds.6306.case.study.2/master/Data/CaseStudy2-data.xlsx", "Data/data2.xlsx", mode="wb")
## Assign file to object
case_data <- data.frame(read_excel("Data/data2.xlsx"))
# Remove redundandt info: EmployeeCount, Over18, StandardHours
df <- case_data[,-c(9,22,27)]
# Load required libraries.
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(knitr)))
suppressWarnings(suppressMessages(library(pander)))
# Convert characters to factors.
df %>% map_if(is.character, as.factor) %>% as_data_frame -> df
#Adjust factor levels as needed
levels(df$BusinessTravel)<-c("Non-Travel","Travel_Rarely","Travel_Frequently")
#Make all variable numeric
numdf<-data.frame(sapply(df,as.numeric))
#Calculate attrition in data set
AT <- table(df$Attrition)
pander(AT)
#And percentages
at<-data.frame(table(df$Attrition))
pander(prop.table(at[,2]))
#Correlate variables
Attcor<-data.frame(cor(numdf))
#Create Attrition object for Attrition correlation coefficients
Attrition<- data.frame(Attcor$Attrition)
#Name attrition rows
Attrition$Parameter<-row.names(Attcor)
#Rename titles Attrition
names(Attrition)<-c("Correlation", "Parameter")
#Sort positive Attrition
SortAtt <- Attrition[order(-Attrition$Correlation),]
#Display top 10 Positively Correlated Parameters
row.names(SortAtt)<-NULL
knitr::kable(head(SortAtt, 10))
# Load library to visualize correlations
suppressWarnings(suppressMessages(library(corrplot)))
#Display graphic with all correlations
par(cex=.5)
corrplot(as.matrix(Attcor), method="color",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.1 Complete Coefficients and Correlations", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
# Top 9 positively correlated parameters with Attrition
par(cex=.6)
SA10<-c(head(SortAtt$Parameter,10))
corrplot(as.matrix(Attcor[SA10,SA10]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.2 Top 9 Postively Correlated Parameters", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
# Plot each of Top 9 positively correlated parameters with Attrition
par(mfrow=c(3,3), las=2)
plot(Attrition~OverTime, data=df, main="Overtime", xlab="", ylab="Attrition")
plot(Attrition~MaritalStatus, data=df, main="Marital Status", xlab="", ylab="")
plot(Attrition~DistanceFromHome, data=df, main="Distance From Home", xlab="", ylab="")
plot(Attrition~Gender, data=df, main= "Gender", xlab="", ylab="Attrition")
plot(Attrition~MonthlyRate, data=df, main="Monlthly Rate", xlab="", ylab="")
plot(Attrition~NumCompaniesWorked, data=df, main= "Num of Companies Worked", xlab="", ylab="")
plot(Attrition~JobRole, data=df, main="Job Role", xlab="", ylab="Attrition")
plot(Attrition~Department, data=df, main="Department", xlab="", ylab="")
plot(Attrition~EducationField, data=df, main="Eduaction Field", xlab="", ylab="")
##Calculate absolute value coefficients
Attrition$AbsAtt <- (Attrition$Correlation^2)^(1/2)
SortAbstAtt<- Attrition[order(-Attrition$AbsAtt),]
#Display Top 9 Absolute Correlated Parameters
row.names(SortAbstAtt)<-NULL
knitr::kable(head(SortAbstAtt,10))
#Display graphic with Highest Absolute Correlated Parameters
par(cex=.8)
SAA10<-c(head(SortAbstAtt$Parameter,10))
corrplot(as.matrix(Attcor[SAA10,SAA10]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
sig.level = 0.05, insig = "blank",
title="Figure 1.3 Top 9 Highly Correlated Parameters in absolute values", mar=c(0,0,2,0), tl.offset = 1,
diag=FALSE)
#Further look at top 9 absolute correlated parameters with Attrition
par(mfrow=c(3,3), las=2)
plot(Attrition~OverTime, data=df, main="Overtime", xlab="", ylab="Attrition")
plot(Attrition~TotalWorkingYears, data=df, main="Total Working Years", xlab="", ylab="")
plot(Attrition~JobLevel, data=df, main="Job Level", xlab="", ylab="")
plot(Attrition~MaritalStatus, data=df, main="Marital Status", xlab="", ylab="Attrition")
plot(Attrition~YearsInCurrentRole, data=df, main="Years in Current Role", xlab="", ylab="")
plot(Attrition~MonthlyIncome, data=df, main="Monthly Income", xlab="", ylab="")
plot(Attrition~Age, data=df, main="Age", xlab="", ylab="Attrition")
plot(Attrition~YearsWithCurrManager, data=df, main="Years with Current Manager", xlab="", ylab="")
plot(Attrition~StockOptionLevel, data=df, main="Stock Option Level", xlab="", ylab="")
# Display Job Role and Attrition correlation bar graph
par(mar=c(12, 5, 5, 2.1),mgp=c(10, 1, 0),las=2)
plot(Attrition~JobRole, data=df, main="Attrition vs. Job Role")
# Generate object for Job Role correlation coefficients
JobRole<- data.frame(Attcor$JobRole)
# Name JobRole rows
JobRole$Parameter<-row.names(Attcor)
# Rename titles Attrition
names(JobRole)<-c("Correlation", "Parameter")
# Calculate absolute value coefficients
JobRole$Abs <- (JobRole$Correlation^2)^(1/2)
SortJobRole<- JobRole[order(-JobRole$Abs),]
# Display top 5 Absolute Correlated Parameters
row.names(SortJobRole)<-NULL
knitr::kable(head(SortJobRole))
# Display graphic with top 4 Absolute Value of Correlated Parameters
par(cex=.8)
SJR5<-c(head(SortJobRole$Parameter,5))
corrplot(as.matrix(Attcor[SJR5,SJR5]), method="pie",
type="upper",
addCoef.col = "black",
tl.col="black", tl.srt=45,
title="Figure 1.4 Top 4 Absolute Value of Correlated Parameters", mar=c(0,0,2,0), tl.offset = 1,
sig.level = 0.05, insig = "blank",
diag=FALSE)
# Further look at top 4 absolute correlated parameters with Job ROle
par(las=2)
par(mar=c(12, 12, 5, 2.1),mgp=c(10, 1, 0),las=2)
plot(TotalWorkingYears~JobRole, data=df, main="Total Working Years vs Job Role")
plot(Age~JobRole, data=df, main="Age vs Job Role")
plot(MonthlyIncome~JobRole, data=df, main= "Montly Income vs Job Role")
# Converting numeric variables (of level parametets) to factors as needed
LM <- df
LM$Education <- as.factor(LM$Education)
LM$EnvironmentSatisfaction <- as.factor(LM$EnvironmentSatisfaction)
LM$JobInvolvement <- as.factor(LM$JobInvolvement)
LM$JobSatisfaction <- as.factor(LM$JobSatisfaction)
LM$PerformanceRating <- as.factor(LM$PerformanceRating)
LM$RelationshipSatisfaction <- as.factor(LM$RelationshipSatisfaction)
LM$WorkLifeBalance <- as.factor(LM$WorkLifeBalance)
## Creating a Training and Testing data set from sampling as a random 80% of the data set provided
smp<-floor(0.9*nrow(LM))
set.seed(123)
ind <- sample(seq_len(nrow(LM)),size=smp)
train <- LM[ind,]
test <- LM[-ind,]
## Load requiered libraries
library(psych)
library(pander)
#Logistic Regression
model <- glm(Attrition ~ ., family = 'binomial', data = train)
pander(model)
cat(paste("AIC for preliminary model is: ", model$aic))
## Model 2
model2 <- glm(Attrition ~ Age + BusinessTravel + DistanceFromHome + EnvironmentSatisfaction +   JobInvolvement + JobRole + JobSatisfaction + MaritalStatus + NumCompaniesWorked + OverTime +   RelationshipSatisfaction + TrainingTimesLastYear + WorkLifeBalance + YearsAtCompany + YearsInCurrentRole + YearsSinceLastPromotion + YearsWithCurrManager, family = 'binomial', data = train)
pander(model2)
#run anova on model2
pander(anova(model2, test = 'Chisq'))
cat(paste("AIC for refined model is: ", model2$aic))
# Model 3 - Logistic Regression Model with the top 3 statistially significant parameters
model3 <- glm(Attrition ~ JobSatisfaction + MaritalStatus + OverTime , family = 'binomial', data = train)
cat(paste("AIC for 3 variables model is: ", model3$aic))
#Prediction for the test data
predmodel <- round(predict(model2,test,type='response'),digits=0)
comparison <- data.frame(predmodel,test$Attrition,test$EmployeeNumber)
names(comparison)<- c("Predicted","Actual","EmployeeNumber")
pred <- ifelse(predmodel>0.5,2,1)
#Loading required libraries
suppressWarnings(suppressMessages(library(ROCR)))
suppressWarnings(suppressMessages(library(Metrics)))
suppressWarnings(suppressMessages(library(pROC)))
pr <- prediction(pred,test$Attrition)
perf <- performance(pr,measure = "tpr",x.measure = "fpr")
plot(perf)
auc(test$Attrition,pred)
#Prediction probabilities and results in comparison with actuals
comparison2 <- cbind(predmodel,pred,test$Attrition,test$EmployeeNumber)
colnames(comparison2) <- c("Probability Greater Than .5 is Yes and Lower than .5 is No ", "Prediction - 2 Yes and 1 is No","Actual - 2 Yes and 1 is No","Employee Number")
#Missclassification error
tabb <- table(Predicted = pred, Actual = test$Attrition)
row.names(tabb) <- c("total number","total missclassifications")
knitr::kable(head(tabb))
#Missclassification percentage
cat(1-sum(diag(tabb))/sum(tabb))
#Goodness of fit test
cat(with(model2,pchisq(null.deviance-deviance,df.null-df.residual,lower.tail = F)))
